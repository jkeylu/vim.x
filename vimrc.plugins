"
" author: jKey Lu <jkeylu@gmail.com>
"

" bufexplorer {{{1
"
nmap <leader><leader> <leader>be


" supertab {{{1
"
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabMappingTabLiteral='<c-v>'

autocmd FileType typescript
  \ let b:SuperTabCompletionContexts
  \   = [ 's:TypescriptContext' ] + g:SuperTabCompletionContexts |
  \ let b:SuperTabContextTextMemberPatterns = [ '\.' ]
function! s:TypescriptContext()
  return "\<c-x>\<c-o>"
endfunction


" neocomplcache.vim | neocomplete.vim {{{1
"
if has('lua')
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#auto_completion_start_length = 4
  let g:neocomplete#manual_completion_start_length = 4
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#enable_camel_case = 1
else
  let g:neocomplcache_enable_at_startup = 1
  let g:neocomplcache_auto_completion_start_length = 4
  let g:neocomplcache_manual_completion_start_length = 4
  let g:neocomplcache_enable_smart_case = 1
  let g:neocomplcache_enable_camel_case_completion = 1
  let g:neocomplcache_enable_underbar_completion = 1
endif


" nerdtree.vim {{{1
"
let NERDTreeChDirMode = 2
let NERDTreeWinSize = 25
let NERDTreeQuitOnOpen = 1
let NERDTreeShowLineNumbers = 1
let NERDTreeDirArrows = 0
nmap <leader>nt :NERDTree .<CR>
nmap <leader>nf :NERDTreeFocus<CR>
nmap <leader>nc :NERDTreeClose<CR>
nmap <leader>np :let NERDTreeQuitOnOpen = !NERDTreeQuitOnOpen<CR>


" CtrlP {{{1
"
let g:ctrlp_regexp = 1
let g:ctrlp_custom_ignore =
  \ {
  \   'dir': '\v[\/]\.(git|hg|svn)$',
  \   'file': '\v\.(exe|so|dll)$'
  \ }
let g:ctrlp_extensions = ['funky']


" ctrlp-funky {{{1
"
nnoremap <leader>fu :CtrlPFunky<CR>
" narrow the list down with a word under cursor
nnoremap <leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<CR>


" vim-multiple-cursors {{{1
"
let g:multi_cursor_quit_key = '<Tab>'


" FencView.vim {{{1
"
let g:fencview_autodetect = 1
let g:fencview_auto_patterns = '*.cnx,*.txt,*.html,*.php,*.cpp,*.h,*.c,*.css,*.js,*.ts,*.py,*.sh,*.java{|\=}'
let g:fencview_checklines = 10


" LargeFile.vim {{{1
"
let g:LargeFile = 100


" mark.vim {{{1
"
if has('gui_running')
  let g:mwDefaultHighlightingPalette = 'extended'
  let g:mwDefaultHighlightingNum = 18
endif


" tagbar {{{1
"
if executable('ctags')
  let g:tagbar_width = 40
  let g:tagbar_autoclose = 1
  let g:tagbar_autofocus = 1
  let g:tagbar_show_linenumbers = 2
  nnoremap <leader>tl :TagbarToggle<cr>
endif


" vim-indent-guides.vim {{{1
"
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2


" javascript {{{1
"
if g:vimx#env.exists('javascript')
  " vim-javascript.vim
  "
  let g:html_indent_inctags = 'html,body,head,tbody'
  let g:html_indent_script1 = 'inc'
  let g:html_indent_style1 = 'inc'

  " vim-node.vim
  "
  autocmd FileType javascript set dictionary+=$HOME/.vim/bundle/vim-node-dict/dict/node.dict
endif


" typescript {{{1
"
if g:vimx#env.exists('typescript') && (v:version >= 704)
  " typescript-vim
  "
  autocmd QuickFixCmdPost [^l]* nested cwindow
  autocmd QuickFixCmdPost l* nested lwindow
endif


" vim-startify {{{1
"
if g:vimx#env.exists('ide')
  let g:startify_session_dir = '~/.cache/vimsession'
  let g:startify_session_persistence = 1
endif

" auto-pairs {{{1
"
let g:AutoPairsMapCR = 0


" syntastic {{{1
"
if g:vimx#env.exists('syntastic')
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
endif


" vim-easymotion {{{1
"
let g:EasyMotion_smartcase = 1
map \ <Plug>(easymotion-prefix)
map / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map n <Plug>(easymotion-next)
map N <Plug>(easymotion-prev)

" vim:ft=vim fdm=marker et ts=4 sw=2 sts=2
